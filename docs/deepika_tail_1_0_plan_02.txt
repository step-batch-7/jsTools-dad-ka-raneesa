----------let say file--------
------a.txt------
  one
  two
  three
  four
  five
  six
  seven
  eight
  .
  .
  .
  twelve
-------------------------
  ------b.txt------
  one
  two
  three
  four
  five
  six
------------------------

---------------------------2nd requirement---------------------------------------

possible out comes:(3 scenarios)
a.should give last given number of lines of a file if given file has more than given no of lines
output => line of text : LastLines
  five
  six
  seven
  eight
  nine
  ten
  eleven
  twelve
input => command line args
  node tail.js -n 8 a.txt

-------------------------------------------

b.should give whole lines in a file if given file has less than given number of lines
output => line of text : lastLines
  one
  two
  three
  four
  five
  six
input => command line args
  node tail.js -n 8 b.txt

-------------------------------------------

c.should give error if given file is not exist
output =>
  tail: c.txt:no such file or directory
input => node tail.js -n 8 c.txt
-------------------------------------------

considering a black box of app
 for "a"flow ------->
[node tail.js -n 8 a.txt]
 => { tail.js } =>
  five
  six
  seven
  eight
  nine
  ten
  eleven
  twelve

 for "b" flow ------>
 [node tail.js -n 8 b.txt]
 => { tail.js } =>
  one
  two
  three
  four
  five
  six

for "c" flow -------->
[node tail.js -n 8 c.txt]
 => { tail.js } =>
 tail: c.txt: no such file or directory

--------------------------flow of 2nd requirement-------------------
[2.1a] last step
description : -> if no.of lines are more than given no.of lines then it will give last last given no.of lines of that text
              -> if no.of lines are less than given no.of lines then it will give whole line in that text
output => lines of text : lastLines
  five
  six
  seven
  eight
  nine
  ten
  eleven
  twelve
input => array of strings ,number of lines(length of array),user Option(n)
  ["one","two","three","four","five",.........,"twelve"],15,8
name => getLastLines
-----------------------------

[2.1b] previous step
output => error text
  tail: c.txt: No such file or directory
input => text : error object
{error:ENOENT}
name => generateErrorMessage
-----------------------------

[2.2] previous step
output => array of strings of object or error object
  {arrayOfLines:["one","two","three","four","five",.........,"twelve"]}
   or
  {error:ENOENT}
input => objectOfUserOptions
  {tailLinesNo:"8",filePath:"a.txt"}
name => getArrayOfTextLines
----------------------------


[2.3] previous step
output => objectOfUserOptions
  {tailLinesNo:"8",filePath:"a.txt"}
input => array of strings : userOptions
  ["-n","8","a.txt"]
name : parseUserOptions
----------------------------

[2.4] previous step
output => array of strings : userOptions
  ["-n","8","a.txt"]
input => array of strings : userArguments
  ["node","tail.js","-n","8","a.txt"]
name => filterUserOptions
----------------------------
----------------------------------------------------------------------------