----------let say file--------
------a.txt------
  one
  two
  three
  four
  five
  six
  seven
  eight
  nine
  ten
  eleven
  twelve
-------------------------
  ------b.txt------
  one
  two
  three
  four
  five
  six
------------------------

---------------------------1st requirement---------------------------------------

possible out comes:(3 scenarios)
a.should give last 10 lines of a file if given file has more than 10 lines
b.should give whole lines if given  file has less than 10 lines
c.should give error if given file is not exist

output => line of text : LastLines
==> a.txt <==
  three
  four
  five
  six
  seven
  eight
  nine
  ten
  eleven
  twelve
==> b.txt <==
  one
  two
  three
  four
  five
  six
==> c.txt <==
  tail:c.txt:no such file or directory

input => command line args
  node tail.js a.txt b.txt c.txt

-------------------------------------------

considering a black box of app
input: [node tail.js a.txt b.txt c.txt]
 => { tail.js } =>
 output:
 ==> a.txt <==
  three
  four
  five
  six
  seven
  eight
  nine
  ten
  eleven
  twelve
==> b.txt <==
  one
  two
  three
  four
  five
  six
==> c.txt <==
  tail:c.txt:no such file or directory

input => command line args

--------------------------flow of 1st requirement-------------------
[1.1a] last step
description : -> if no.of lines are more than 10 then it will give last 10 lines of that text
              -> if no.of line are less than 10 then it will give whole lines in that text
output => lines of text : LastLines
 ==> a.txt <==
  three
  four
  five
  six
  seven
  eight
  nine
  ten
  eleven
  twelve
==> b.txt <==
  one
  two
  three
  four
  five
  six
==> c.txt <==
  tail:c.txt:no such file or directory
input => array of strings ,number of lines(length of array)
 {aFile:["three","four","five",.........,"twelve"],bFile:["one","two","three","four","five","six"],error:["tail: c.txt: No such file or directory"]}
 name => getFormatMessage
-----------------------------

[1.1b] previous step
output => error text
  tail: c.txt: No such file or directory
input => error object
{error:ENOENT}
name => generateErrorMessage
-----------------------------

[1.2] previous step
output => object of array of strings or error object
  {arrayOfLines:["one","two","three","four","five",.........,"twelve"]}
   or
  {error:ENOENT}
input => text : filePath
  "a.txt"
name => getArrayOfTextLines
----------------------------

[1.3] previous step
output => text : filePath
  "a.txt"
input => array of string : userOption
  ["a.txt"]
name => getFilePath
---------------------------

[1.4] previous step
output => array of string : userOption
  ["a.txt"]
input => array of strings : userArguments
  ["node","tail.js","a.txt"]
name => filterUserOptions
----------------------------
----------------------------------------------------------------------------